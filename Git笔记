（1）版本控制工具
集中式版本控制工具：CVS、SVN、VSS。都有一个单一的集中管理的服务器，保存所有文件的修订版本，通过客户端连到这台服务器，取出最新的文件或者提交修改。

分布式版本控制工具：Git、Mercurial、Bazaar、Darcs。像Git这种分布式版本控制工具，客户端提取的不是最新版本的文件快照，而是把代码仓库完整地镜像下来〈本地库)。这样任何一处协同工作用的文件发生故障，事后都可以用其他客户端的本地仓库进行恢复。因为每个客户端的每一次文件提取操作，实际上都是一次对整个文件仓库的完整备份。




Git常用命令：
（1）git config --global user.name 用户名    设置用户签名
（2）git config --global user.email 邮箱     设置用户签名
（3）git init                                初始化本地库
（4）git status                              查看本地库状态
（5）git add 文件名                          添加到暂存区
（6）git rm --cached 文件名                  删除暂存区中文件（工作区中不会删除）
（7）git commit -m "日志信息” 文件名         提交到本地库
（8）git reflog                              查看版本信息
（9）git log                                 查看详细版本信息
（10）git reset --hard 版本号                版本穿梭


Git分支操作常用命令：
（1）git branch 分支名                       创建分支
（2）git branch -v                           查看分支
（3）git checkout 分支名                     切换分支
（4）git merge 分支名                        把指定的分支合并到当前分支上

分支合并冲突原因：合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。Git无法替我们决定使用哪一个。必须人为决定新代码内容。

注意：手动解决合并冲突后，需要添加到暂存区及提交。提交时注意此时使用git commit命令时不能带文件名。


Git远程仓库操作命令：
（1）git remote -v                           查看当前所有远程地址别名
（2）git remote add 别名 远程地址            起别名
（3）git push 别名 分支                      推送本地分支上的内容到远程仓库
（4）git clone 远程地址                      将远程仓库的内容克隆到本地
（5）git pull 远程库地址别名 远程分支名      将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并
